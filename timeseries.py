# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xzryH2I53rZVeubXoed7iwzPLVves_A6
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras import regularizers

df = pd.read_csv('data.csv')
df

df.shape[0]

df.info()

df.describe()

df.isnull().sum()

date = df['Formatted Date'].values
value  = df['Temperature (C)'].values

plt.figure(figsize=(30,5))
plt.plot(value)
plt.title('Temperature', fontsize=20);

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

date_train, date_test, temp_train, temp_test = train_test_split(date, value, test_size=0.2)
train_set = windowed_dataset(temp_train, window_size=1000, batch_size=100, shuffle_buffer=1000)

minMae = value.max() - value.min() * 0.1
print(minMae)

model = tf.keras.Sequential([
    tf.keras.layers.Convolution1D(
        16,
        kernel_size=77,
        padding="same",
        activation="relu",
        kernel_regularizer=regularizers.L1L2(l1=1e-5, l2=1e-4),
        bias_regularizer=regularizers.L2(1e-4),
        activity_regularizer=regularizers.L2(1e-5)),
    tf.keras.layers.MaxPooling1D(pool_size=5),
    tf.keras.layers.Bidirectional(
        tf.keras.layers.LSTM(
          32,
          dropout=0.2,
          return_sequences=True)),
    tf.keras.layers.LSTM(
        64,
        return_sequences=False),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(32),
    tf.keras.layers.Dense(1)
])

class MyThresholdCallback(tf.keras.callbacks.Callback):
    def __init__(self, threshold):
        super(MyThresholdCallback, self).__init__()
        self.threshold = threshold

    def on_epoch_end(self, epoch, logs=None):
        mae = logs["mae"]
        if mae < self.threshold:
            self.model.stop_training = True

callback = MyThresholdCallback(threshold=minMae)

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-03, momentum=0.6)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set, epochs=20, callbacks=[callback])

print(history.history.keys())
plt.plot(history.history['mae'])
plt.plot(history.history['loss'])
plt.title('model mae & loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['mae', 'loss'], loc='upper left')
plt.show()